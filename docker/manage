#!/bin/bash
#
# Copyright 2017-2018 Government of Canada - Public Services and Procurement Canada - buyandsell.gc.ca
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}
export MSYS_NO_PATHCONV=1
set -e

S2I_EXE=s2i
if [ -z $(type -P "$S2I_EXE") ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first, since the builds require
          a combination of Docker images.

  up -  Creates the application container from the built images
        and starts the services based on the docker-compose.yml file.

        You can pass in a list of containers to start.
        By default all containers will be started.

  start - Same as up

  start-dev - Builds and runs a live development version of greenlight, along with
              the required supporting components. Once started, the website is
              automatically compiled and updated in response to file modifications.

  logs - Display the logs from the docker compose run (ctrl-c to exit).

  stop - Stops the services.  This is a non-destructive process.  The volumes and containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.

  rm - Same as down

  lint - Apply pylint to Python source code.

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------

DEFAULT_CONTAINERS="agent-wallet-db agri-agent bcreg-agent ministry-finance-agent city-surrey-agent fraser-valley-agent liquor-control-agent worksafe-agent"

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

configureEnvironment () {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # general
  export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-"greenlight"}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export APPLICATION_URL=${APPLICATION_URL-http://localhost:${WEB_HTTP_PORT:-5000}}
  export ENDPOINT_URL=http://${ENDPOINT_HOST-$DOCKERHOST:${WEB_HTTP_PORT:-5000}}
  export LOG_LEVEL=${LOG_LEVEL:-INFO}

  # caddy
  export TOB_API_URL=${TOB_API_URL:-http://tob-api:8080/api/v2}
  export TOB_APP_URL=${TOB_APP_URL:-http://localhost:8080}
  export WEB_BASE_HREF=${WEB_BASE_HREF:-/}
  export WEB_HOST_NAME=${WEB_HOST_NAME:-0.0.0.0}
  export WEB_HOST_PORT=${WEB_HOST_PORT:-8080}
  export WEB_HOST_TLS=${WEB_HOST_TLS:-off}
  export WEB_HTTP_PORT=${WEB_HTTP_PORT:-5000}
  export MINISTRY_AGRICULTURE_AGENT_HOST=${MINISTRY_AGRICULTURE_AGENT_HOST:-agri-agent}
  export MINISTRY_AGRICULTURE_AGENT_PORT=${MINISTRY_AGRICULTURE_AGENT_PORT:-8000}
  export BCREG_AGENT_HOST=${BCREG_AGENT_HOST:-bcreg-agent}
  export BCREG_AGENT_PORT=${BCREG_AGENT_PORT:-8000}
  export MINISTRY_FINANCE_AGENT_HOST=${MINISTRY_FINANCE_AGENT_HOST:-ministry-finance-agent}
  export MINISTRY_FINANCE_AGENT_PORT=${MINISTRY_FINANCE_AGENT_PORT:-8000}
  export CITY_SURREY_AGENT_HOST=${CITY_SURREY_AGENT_HOST:-city-surrey-agent}
  export CITY_SURREY_AGENT_PORT=${CITY_SURREY_AGENT_PORT:-8000}
  export FRASER_VALLEY_AGENT_HOST=${FRASER_VALLEY_AGENT_HOST:-fraser-valley-agent}
  export FRASER_VALLEY_AGENT_PORT=${FRASER_VALLEY_AGENT_PORT:-8000}
  export LIQUOR_CONTROL_AGENT_HOST=${LIQUOR_CONTROL_AGENT_HOST:-liquor-control-agent}
  export LIQUOR_CONTROL_AGENT_PORT=${LIQUOR_CONTROL_AGENT_PORT:-8000}
  export WORKSAFE_AGENT_HOST=${WORKSAFE_AGENT_HOST:-worksafe-agent}
  export WORKSAFE_AGENT_PORT=${WORKSAFE_AGENT_PORT:-8000}

  # wallet-db
  export POSTGRESQL_DATABASE="THE_ORG_BOOK"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"
  export INDY_WALLET_TYPE="postgres_storage"
  export WALLET_ENCRYPTION_KEY="key"
  export POSTGRESQL_WALLET_HOST="wallet-db"
  export POSTGRESQL_WALLET_PORT="5432"
  export POSTGRESQL_ADMIN_USER="postgres"
  export POSTGRESQL_ADMIN_PASSWORD="mysecretpassword"
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""
  if [ "$COMMAND" == "start" ]; then
    ARGS+="--force-recreate"
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

build() {
  # Build all containers in the docker-compose file
  echo -e "\nBuilding agent and wallet containers ..."
  echo docker-compose build $@
  docker-compose build $@

  #
  # The s2i-caddy image is used as base for the caddy-runtime runtime image.
  # The caddy-runtime image is used for the final runtime image.
  # The nodejs-build image is used to build the artifacts for the angular distribution.
  # The greenlight image is copy of the s2i-caddy image complete with a copy of the build artifacts.
  #
  echo -e "\nBuilding bcgov-s2i-caddy image ..."
  docker build -q \
    -t 'bcgov-s2i-caddy' \
    'https://github.com/BCDevOps/s2i-caddy.git'

  echo -e "\nBuilding caddy-runtime image ..."
  docker build -q \
    -t 'caddy-runtime' \
    -f './proxy/Dockerfile' '../'

  # This image only exists to pre-create the npm cache directory
  # so it can be properly used as a volume, it doesn't apply to openshift
  echo -e "\nBuilding nodejs-build image ..."
  docker build -q \
    -t 'nodejs-build' \
    -f './nodejs-build/Dockerfile' '../'

  if [ -t 0 ]; then
    # color npm output in interactive terminal
	  NPM_COLOR="always"
  else
    NPM_COLOR="true"
  fi


  echo -e "\nBuilding greenlight image ..."
  ${S2I_EXE} build \
    -e "NPM_CONFIG_COLOR=${NPM_COLOR}" \
    -e "NPM_CONFIG_LOGLEVEL=timing" \
    -e "HTTP_PROXY=${HTTP_PROXY}" \
    -e "HTTPS_PROXY=${HTTPS_PROXY}" \
    -e "NG_BASE_HREF=${WEB_BASE_HREF}" \
    -e "NG_DEPLOY_URL=${WEB_DEPLOY_URL}" \
    -v "${COMPOSE_PROJECT_NAME}_greenlight-npm-cache:/opt/app-root/src/.npm" \
    --runtime-image "caddy-runtime" \
    -a /opt/app-root/src/dist/greenlight-demo \
    '../greenlight-demo' \
    'nodejs-build' \
    'greenlight'
}

build-dev() {
  # This image only exists to pre-create the npm cache directory
  # so it can be properly used as a volume, it doesn't apply to openshift
  echo -e "\nBuilding nodejs-build image ..."
  docker build -q \
    -t 'nodejs-build' \
    -f './nodejs-build/Dockerfile' '../'

  # NB: We build with DEV_MODE=true but run with DEV_MODE=false
  echo -e "\nBuilding greenlight-dev image ..."
  ${S2I_EXE} build \
    -e "DEV_MODE=true" \
    -e "HTTP_PROXY=${HTTP_PROXY}" \
    -e "HTTPS_PROXY=${HTTPS_PROXY}" \
    -e "NG_BASE_HREF=${WEB_BASE_HREF}" \
    -e "NG_DEPLOY_URL=${WEB_DEPLOY_URL}" \
    -v "${COMPOSE_PROJECT_NAME}_greenlight-npm-cache:/opt/app-root/src/.npm" \
    '../greenlight-demo' \
    'nodejs-build' \
    'greenlight-dev'
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v
}

pylint() {
  PYTHON=$(which python3 || which python)
  if [ -z "$PYTHON" ]; then
    echo -e "python executable could not be located"
  fi
  PIP=$(which pip3 || which pip)
  if [ -z "$PIP" ]; then
    echo -e "pip executable could not be located"
  fi
  PYLINT=$(which pylint)
  if [ -z "$PYLINT" ]; then
    echo -e "Installing pylint ..."
    $PIP install pylint
  fi
  cd ..
  $PYLINT greenlight-agent/src/*.py
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
  start|up)
    DEFAULT_CONTAINERS="caddy $DEFAULT_CONTAINERS"
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up -d ${_startupParams}
    docker-compose logs -f
    ;;
  logs)
    configureEnvironment $@
    docker-compose logs -f
    ;;
  start-dev)
    DEFAULT_CONTAINERS="proxy-dev greenlight-dev $DEFAULT_CONTAINERS"
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    [ -z "$SKIP_BUILD" ] && build-dev
    docker-compose up -d ${_startupParams}
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment $@
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  lint)
    pylint
    ;;
  *)
    usage
esac

popd >/dev/null
